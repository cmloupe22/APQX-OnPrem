name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app/**'
      - '.github/workflows/ci-cd.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'

permissions:
  contents: read
  packages: read
  security-events: write
  id-token: write

jobs:
  # Job 1: Test
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: ./app
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      working-directory: ./app
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        files: ./app/coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  # Job 2: Build and Scan (local only - no push to registry)
  build:
    name: Build and Scan Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build image (no push - local registry only)
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./app
        file: ./app/Dockerfile
        push: false
        load: true
        tags: sample-app:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_SHA=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: sample-app:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Trivy vulnerability scanner (Table)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: sample-app:${{ github.sha }}
        format: 'table'
        severity: 'CRITICAL,HIGH,MEDIUM'

  # Job 3: Security Scan
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Checkov (IaC security)
      uses: bridgecrewio/checkov-action@master
      with:
        directory: gitops/
        framework: kubernetes
        output_format: sarif
        output_file_path: checkov-results.sarif
        quiet: true
      continue-on-error: true
    
    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-results.sarif
      continue-on-error: true
    
    - name: Check for secrets in code
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
      continue-on-error: true

  # Job 4: Manifest Validation
  validate:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.28.0'
    
    - name: Validate manifests
      run: |
        for file in $(find gitops/apps -name "*.yaml" -type f); do
          echo "Validating $file"
          kubectl apply --dry-run=client -f "$file"
        done
    
    - name: Install kubeconform
      run: |
        wget https://github.com/yannh/kubeconform/releases/download/v0.6.4/kubeconform-linux-amd64.tar.gz
        tar xzf kubeconform-linux-amd64.tar.gz
        sudo mv kubeconform /usr/local/bin/
    
    - name: Validate with kubeconform
      run: |
        kubeconform -summary -output json gitops/apps/sample-app/*.yaml